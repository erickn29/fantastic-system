"""add_tables

Revision ID: 86ce371678be
Revises: 5252bf9c1e3c
Create Date: 2024-12-08 19:23:51.241921

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '86ce371678be'
down_revision: Union[str, None] = '5252bf9c1e3c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('technology',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_technology')),
    sa.UniqueConstraint('id', name=op.f('uq_technology_id'))
    )
    op.create_table('question',
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('technology_id', sa.BigInteger(), nullable=False),
    sa.Column('sub_technology_id', sa.BigInteger(), nullable=True),
    sa.Column('complexity', sa.SmallInteger(), nullable=False, comment='1-9'),
    sa.Column('published', sa.Boolean(), nullable=False),
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['sub_technology_id'], ['technology.id'], name=op.f('fk_question_sub_technology_id_technology')),
    sa.ForeignKeyConstraint(['technology_id'], ['technology.id'], name=op.f('fk_question_technology_id_technology')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_question')),
    sa.UniqueConstraint('id', name=op.f('uq_question_id'))
    )
    op.create_table('ai_assessment',
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('question_id', sa.BigInteger(), nullable=False),
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], name=op.f('fk_ai_assessment_question_id_question')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_ai_assessment_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ai_assessment')),
    sa.UniqueConstraint('id', name=op.f('uq_ai_assessment_id'))
    )
    op.create_table('answer',
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('question_id', sa.BigInteger(), nullable=False),
    sa.Column('score', sa.SmallInteger(), nullable=False),
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], name=op.f('fk_answer_question_id_question')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_answer_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_answer')),
    sa.UniqueConstraint('id', name=op.f('uq_answer_id'))
    )
    op.create_table('user_question',
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('question_id', sa.BigInteger(), nullable=False),
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], name=op.f('fk_user_question_question_id_question')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_user_question_user_id_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user_question')),
    sa.UniqueConstraint('id', name=op.f('uq_user_question_id'))
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_question')
    op.drop_table('answer')
    op.drop_table('ai_assessment')
    op.drop_table('question')
    op.drop_table('technology')
    # ### end Alembic commands ###
